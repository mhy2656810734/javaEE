package thread;

/**
 * wait 和 notify
 * @author 26568
 * @date 2022-12-01 15:00
 */
public class ThreadDemo16 {
    public static void main(String[] args) {
        Object object = new Object();
        Thread t1 = new Thread(() -> {
            System.out.println("t1: wait之前");
            try {
                synchronized (object) {
                    // 此时这里的阻塞释放了锁,其他线程可以获取到object这个对象的锁的
                    object.wait();
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            System.out.println("t1: wait之后");
        });
        Thread t2 = new Thread(() -> {
            System.out.println("t2: notify之前");
            synchronized (object) {
                // notigy 必须先获取到锁,才能进行通知
                object.notify();
            }
            System.out.println("t2: notify之后");
        });
        t1.start();
        // 如果不写sleep 由于线程调度的不确定性,此时不能保证一定是执行wait 后执行notify
        // 如果调用notify,此时没有线程wait,此处的wait是无法被唤醒的
        try {
            Thread.sleep(500);// 500毫秒足以执行完线程t1的wait操作
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        t2.start();
    }
}
