package thread;

import com.sun.xml.internal.stream.util.ThreadLocalBufferAllocator;
import netscape.security.UserTarget;

import java.util.Scanner;

/**
 * @author 26568
 * @date 2022-12-05 10:42
 */
// 饿汉模式:在类加载时期就已经创建好实例
class Singleton1 {
    public volatile static Singleton1 instance = new Singleton1();
    public static Singleton1 getInstance() {
        return instance;
    }
    // 避免创造实例
    private Singleton1(){};
}
// 懒汉模式:需要创建实例时才创建
class SingletonLazy1 {
    public volatile static SingletonLazy1 instance = null;
    public static SingletonLazy1 getInstance() {
        // 第一个if判断是不是需要加锁
        if (instance == null) {
            // 先加锁
            synchronized (SingletonLazy1.class) {
                // 判断此时是不是需要创建实例,可能其他线程已经创建好了线程
                if (instance == null) {
                    instance = new SingletonLazy1();
                }
            }
        }
        return instance;
    }
}
public class ThreadDemo22 {
    public static void main(String[] args) throws InterruptedException {
//        Singleton1 s1 = Singleton1.getInstance();
//        Singleton1 s2 = Singleton1.getInstance();
        SingletonLazy1 s1 = SingletonLazy1.getInstance();
        SingletonLazy1 s2 = SingletonLazy1.getInstance();
        System.out.println(s1 == s2);
    }
}
