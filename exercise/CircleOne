class CircleOne {
    public int findSubstringInWraproundString(String s) {
        // 1.状态表示
        // 以i位置为结尾...
        // dp[i] 表示：以i位置为结尾的所有子串中，有多少个在base中出现过
        // 2.状态转移方程
        // 以i结尾的子串的长度为1(i下标的字符单独):  s(i)肯定出现过一次 
        // dp[i] = 1
        // 以i结尾的子串的长度大于1
        // dp[i] = dp[i-1]  （条件，说明i-1下标和i下标的字符是连续的，或者是z-a，
        // (这样就可以保证，即使将i下标的字符也拼接到以i-1为结尾的字符串的后面也会在base中出现）
        // 取上述两种情况的和
        // 3.初始化
        // 出现了 i - 1，考虑第一个位置
        // 将dp表初始化为1 (每个字符都会出现一次)
        // 4.填表顺序
        // 从左到右
        // 5.返回值
        // 由于上述dp表中会计算重复出现的子串，所以要想办法去重
        // 去重: 创建一个26大小的数组,然后里面的值保存相应字符结尾的最大的dp值即可
        // 最后返回数组的和

        // 创建dp 表
        int n = s.length();
        char[] arr = s.toCharArray();
        int[] dp = new int[n];
        // 初始化
        Arrays.fill(dp,1);
        // 填表
        for (int i = 1; i < n;i++) {
            // 以i位置结尾的所有子串中，有多少个在base中出现过
            char ch1 = arr[i-1];
            char ch2 = arr[i];
            if ((ch1 +1 == ch2) || (ch1 =='z' && ch2 == 'a')) {
                dp[i] += dp[i-1];
            }
        }
        // 1.去重
        int[] hash = new int[26];
        for (int i = 0; i < n;i++) {
            // 保存以当前i下标的这个字符结尾的最大的dp值
            // 比如： abc 和 ygabc 都是以c结尾，分别对应的dp值，肯定是后面的大
            // 并且，后面的子串一定会包括abc，所以去掉abc的dp值
            hash[arr[i]-'a'] = Math.max(hash[arr[i]-'a'],dp[i]);
        }
        // 2.返回数组的和
        int total = 0;
        for (int i = 0; i < 26;i++) {
            total += hash[i];
        }
        return total;
    }
}
