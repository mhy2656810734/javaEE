package thread;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * @author 26568
 * @date 2023-01-07 18:52
 */

public class ThreadDemo29 {
    public static void main(String[] args) {
        // 这些原子类 基于CAS 实现了自增自减等操作,此时进行这些类操作不需要加锁,也是线程安全的
        AtomicInteger count2 = new AtomicInteger(0);
        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 50000; i++) {
                // 因为java不支持运算符重载,所以只能通过使用普通方法来表示自增自减
                count2.getAndIncrement(); // count2++;
//                count2.incrementAndGet();// ++count2
//                count2.getAndDecrement();// count2--;
//                count2.decrementAndGet();// --count2;

            }
        });
        Thread t2 = new Thread(() -> {
            for (int i = 0; i < 50000; i++) {
                count2.getAndIncrement();
            }
        });
        t1.start();
        t2.start();
        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        System.out.println(count2);
    }
}
