package thread;

import java.sql.SQLOutput;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantLock;

/**
 *
 * @author 26568
 * @date 2023-01-11 19:27
 */
// 线程池
class MyThreadPool1 {
    private BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
    public MyThreadPool1(int n) {
        // 创建线程
        for (int i = 0; i < n; i++) {
            Thread t = new Thread(() -> {
               while (true) {
                   try {
                       Runnable runnable = queue.take();
                       runnable.run();
                   } catch (InterruptedException e) {
                       throw new RuntimeException(e);
                   }
               }
            });
            t.start();
        }
    }
    public void submit(Runnable runnable) {
        try {
            queue.put(runnable);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
public class Exercise {
    public static void main(String[] args) throws InterruptedException {
        MyThreadPool1 pool1 = new MyThreadPool1(10);
        for (int i = 0; i < 10; i++) {
            int n = i;
            pool1.submit(new Runnable() {
                @Override
                public void run() {
                    System.out.println("hello:"+n);
                }
            });
        }
    }
}
