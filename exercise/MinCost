import java.util.Scanner;

// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class MinCost {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNextInt()) { // 注意 while 处理多个 case
             int n = in.nextInt();
             int[] arr = new int[n];
             for (int i = 0; i < n;i++) {
                arr[i] = in.nextInt();
             }
             // 1.状态表示 dp[i] 表示到达i台阶的花费
             // 2.状态转移:
             // 从i最近的一步划分问题，前面几步可以到i
             // dp[i] = i - 1步+arr[i-1] 或者 i- 2 + arr[i-2] 的最小花费
             // 3.初始化
             // 4.填表 
             // 5.返回值 dp[n]
             // 
             // 1.创建dp 表
             // 2.初始化
             // 3.填表
             // 4.返回值
            //  int[] dp = new int[n+1];
            //  dp[0] = 0;
            //  dp[1] = 0;
            //  for (int i = 2;i <= n;i++) {
            //     dp[i] = Math.min(dp[i-1] + arr[i-1],dp[i - 2] + arr[i-2]);
            //  }
            int[] dp = new int[n];
            dp[n-1] = arr[n - 1];
            dp[n - 2] = arr[n - 2];
            for (int i = n - 3; i >= 0;i--) {
                dp[i] = Math.min(dp[i+1],dp[i+2]) + arr[i];
            }
            System.out.println(Math.min(dp[0],dp[1]));
        }
    }
}
