package network;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

/**
 * UDP 版本的回显服务器
 * @author 26568
 * @date 2023-01-13 18:10
 */
public class UdpEchoServer {
    // 网络编程 本质上是要操作网卡
    // 但是网卡不好直接操作 在操作系统内核中,使用了一种特殊的叫做"socket"这样的文件来抽象表示网卡
    // 因此进行网络通信需要先有一个socket对象
    private DatagramSocket socket = null;
    // 对于服务器来说  创建socket对象的同时,要让它绑定上一个具体的端口号
    // 服务器一定要关联上一个具体的端口
    // 服务器是网络传输中,被动的一方.如果是操作系统随机分配的端口 此时客户端就不知道这个端口是什么了,也就无法进行通信
    public UdpEchoServer(int port) throws SocketException {
        socket = new DatagramSocket(port);
    }
    public void start() throws IOException {
        System.out.println("服务器启动");
        // 服务器不是只给一个客户端提供服务 需要服务很多客户端
        while (true) {
            // 1.接受请求并进行解析
            // receive方法的参数是一个"输出型参数",需要先构造好空白的DatagramPacket 对象,交给receive来填充
            DatagramPacket requestPacket = new DatagramPacket(new byte[4096],4096);
            socket.receive(requestPacket);
            // 此时这个DatagramPacket是个特殊的对象,并不方便直接进行处理,可以把这里包含的数据拿出来构造成一个字符串
            // 通过getLength()获取到实际的数据报的长度
            String request = new String(requestPacket.getData(),0, requestPacket.getLength());
            // 2.根据请求计算响应  这里的请求和响应一样
            String response = process(request);
            // 3.将响应写回客户端
            // send 的参数也是DatagramPacket对象,需要先构造好这个对象
            // 此处构造对象 不能用空的字节数组构造了,而是要使用响应数据来构造
                                                                // 字节数组             字节数组长度
            DatagramPacket responsePacket = new DatagramPacket(response.getBytes(),response.getBytes().length,
                    requestPacket.getSocketAddress());// 获取到客户端的ip 和 端口号
            socket.send(responsePacket);
            // 4.打印一下 当前这次请求响应的处理中间结果
            // 获取到requestPacket里面的ip  获取到里面的端口  请求的数据  响应的数据
            System.out.printf("[%s:%d] req: %s; resp: %s\n",requestPacket.getAddress().toString(),
                    requestPacket.getPort(),request,response);
        }
    }

    // 计算响应的方法
    public String process(String request) {
        return request;
    }

    public static void main(String[] args) throws IOException {
        // 服务器的端口号可以随便指定
        // 1024 -> 65535 之间即可
        UdpEchoServer server = new UdpEchoServer(9090);
        server.start();
    }
}
