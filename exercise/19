package thread;

import com.sun.xml.internal.stream.util.ThreadLocalBufferAllocator;
import netscape.security.UserTarget;

import java.util.Scanner;

/**
 * @author 26568
 * @date 2022-12-05 10:42
 */
// 饿汉模式
// 保证Sing]leton只能创建出一个实例
class Singleton1 {
    // 在此处,先将这个实例创建出来
    // volatile 禁止指令重排序
    private volatile static Singleton1 instance = new Singleton1();
    // 如果需要获取instance 这个唯一实例,需要通过Singleton.getInstance() 方法来获取
    public static Singleton1 getInstance() {
        return instance;
    }
    // 为了避免Singleton不小心复制出多份来
    // 把构造方法设置成私有的,在类外面,就无法通过 new Singleton的方式创建这个Singleton这个实例了
    private Singleton1(){};
}
// 懒汉模式
class SingletonLazy1{
    private volatile static SingletonLazy1 instance = null;
    public static SingletonLazy1 getInstance() {
        // 首先判断是不是需要加锁
        if (instance == null) {
            // 为空需要加锁
            synchronized(SingletonLazy1.class) {
                // 此时判断是不是需要创建实例
                if (instance == null) {
                    instance =  new SingletonLazy1();
                }
            }
        }
        return instance;
    }
    private SingletonLazy1() {

    }
}
public class ThreadDemo22 {
    public static void main(String[] args) throws InterruptedException {
//        Singleton s = Singleton.getInstance();
//        Singleton s2 = Singleton.getInstance();
        SingletonLazy1 s1 = SingletonLazy1.getInstance();
        SingletonLazy1 s2 = SingletonLazy1.getInstance();
        System.out.println(s1 == s2);
    }
}
