package thread;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

/**
 * @author 26568
 * @date 2023-01-08 19:33
 */
public class ThreadDemo30 {
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        // 使用Callable 方法计算 1+2+3+.....+100
        Callable<Integer> callable = new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                // 相当于run方法
                int sum = 0;
                for (int i = 1; i < 101; i++) {
                    sum += i;
                }
                return sum;
            }
        };
        FutureTask<Integer> futureTask = new FutureTask<>(callable);
        Thread t = new Thread(futureTask);
        t.start();
        // get方法就是获取结果  get会发生阻塞,知道Callable执行完毕,get才阻塞完成,才获取到结果
        Integer result = futureTask.get();
        System.out.println(result);
    }
}
