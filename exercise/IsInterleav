class IsInterleav {
    public boolean isInterleave(String s1, String s2, String s3) {
        // 0.解题思路：本质上就是判断s1和s2能否拼接出s3
        // 1.状态表示
        // dp[i][j]表示s1[0,i]区间和s2[0,j]区间字符串能不能拼接出s3[0,i+j]区间
        // 2.状态转移方程
        // 根据最后一个位置进行分情况
        // 如果s3是由s2和s1拼接成的，那么s3的最后一个字符等于s1或者s2最后一个字符
        // 2.1如果s3[i+j] == s1[i]
        // 则dp[i][j] = dp[i-1][j]  继续判断s3的i-1+j是不是由s1[0,i-1]和s2[0,j]组成
        // 2.2如果 s3[i+j] == s2[j] 
        // 则dp[i][j] == dp[i][j-1] 继续判断s3的i+j-1是不是由s1[0,i]和s2[0,j-1]组成
        // 3.初始化
        // 状态转移方程出现了i-1和j-1，则多加一行和一列
        // 初始化第一行：第一行表示s1为空，则s2若要拼接成s3,则每个位置要和s3对应 
        //              只要出现不对应的，后续都是false
        // 初始化第一列：第一列表示s2为空，则s1若要拼接成s3,则每个位置要和s3对应
        //              只要出现不对应的，后续都是false
        // dp[0][0] = true
        // 4.填表
        // dp[i][j]和 dp[i-1][j] 或者dp[i][j-1]有关，因此，从左到右 从上到下
        // 5.返回值
        // dp[n][m]

        // 预处理
        int n = s1.length();
        int m = s2.length();
        if ((m+n) != s3.length()) {
            return false;
        }
        s1 = " "+s1;
        s2 = " "+s2;
        s3 = " "+s3;
        // 创建dp表
        boolean[][] dp = new boolean[n+1][m+1];
        // 初始化
        dp[0][0] = true;
        // 初始化第一行
        for (int j = 1; j <= m;j++) {
            if (s2.charAt(j) == s3.charAt(j)) {
                dp[0][j] = true;
            } else {
                break;
            }
        }
        // 初始化第一列
        for (int i = 1; i <= n;i++) {
            if (s1.charAt(i) == s3.charAt(i)) {
                dp[i][0] = true;
            }else {
                break;
            }
        }
        // 填表
        for (int i = 1; i <= n;i++) {
            for (int j = 1; j <= m;j++) {
                dp[i][j] = ((s1.charAt(i) == s3.charAt(i+j)&&dp[i-1][j])|| 
                (s2.charAt(j) == s3.charAt(i+j)&&dp[i][j-1]));
            }
        }
        return dp[n][m];
    }
}
