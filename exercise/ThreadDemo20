package thread;

/**
 * 阻塞队列
 * @author 26568
 * @date 2023-04-06 13:22
 */
class MyBlockingQueue {
    public int[] items = new int[1000];
    public int head = 0;
    public int tail = 0;
    public int size = 0;
    // 入队列
    public void put(int val) throws InterruptedException {
        synchronized (this) {
            while (this.size == items.length) {
                // 满了就阻塞等待
                this.wait();
            }
            this.items[tail] = val;
            this.tail++;
            if (this.tail >= items.length) {
                this.tail = 0;
            }
            this.size++;
            this.notify();
        }
    }
    // 出队列
    public int take() throws InterruptedException {
        int result = 0;
        synchronized (this) {
            while (this.size == 0) {
                this.wait();
            }
            result = this.items[head];
            this.head++;
            if (this.head >= items.length) {
                this.head = 0;
            }
            this.size--;
            this.notify();
        }
        return result;
    }
}
public class ThreadDemo20 {
    public static void main(String[] args) throws InterruptedException {
        MyBlockingQueue myBlockingQueue = new MyBlockingQueue();
//        myBlockingQueue.put(1);
//        myBlockingQueue.put(2);
//        myBlockingQueue.put(3);
//        myBlockingQueue.put(4);
//        int res = 0;
//        res = myBlockingQueue.take();
//        System.out.println(res);
//        res = myBlockingQueue.take();
//        System.out.println(res);
//        res = myBlockingQueue.take();
//        System.out.println(res);
//        res = myBlockingQueue.take();
//        System.out.println(res);
        Thread customer = new Thread(() -> {
            while (true) {
                try {
                    int ret = myBlockingQueue.take();
                    System.out.println("消费的元素:"+ret);
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        customer.start();
        Thread producer = new Thread(() -> {
            int count = 0;
            while (true) {
                try {
                    myBlockingQueue.put(count);
                    System.out.println("生产的元素:"+count);
                    count++;
                   // Thread.sleep(500);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        producer.start();
    }
}
