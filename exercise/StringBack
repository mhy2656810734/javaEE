class StringBack {
    public int countSubstrings(String s) {
        // 1.状态表示
        // 使用二维数组dp表
        //dp[i][j]表示s字符串[i,j]的子串，是否是回文子串
        // 2.状态转移方程
        // 此时根据s[i] 和 s[j] 的值分情况讨论
        // 如果 s[i] != s[j]   dp[i][j] = false
        // 如果 s[i] == s[j]  就需要继续判断这个范围内的子串是否是回文串
        // 下标 i == j  则dp[i][j] = true
        // 下标 i+1 = j 则dp[i][j] = true
        //  dp[i][j] = dp[i+1][j-1]
        // 3.初始化
        // 无需初始化
        // 4.填表顺序
        // 更新dp[i][j] 需要 dp[i+1][j-1] 所以从下往上填
        // 5.返回值
        // 由于dp表中记录的是以s字符串[i,j]的子串是不是回文，直接统计true的个数即可

        // 创建dp表
        char[] arr = s.toCharArray();
        int n = arr.length;
        boolean[][] dp = new boolean[n][n];
        // 填表
        int ret = 0;
        for (int i = n-1; i >= 0;i--) {// 固定开始范围
            for (int j = i; j < n;j++) {// 枚举结束范围
                // 先判断当前字符是否相等
                if (arr[i] == arr[j]) {
                    // 开始根据状态转移ij三种情况填表
                    if (i == j || i+1 == j) {
                        dp[i][j] = true;
                    } else {
                        // 此时说明i下标和j下标有很多字符
                        dp[i][j] = dp[i+1][j-1];
                    }
                }
                if (dp[i][j]) {
                    ret++;
                }
            }
        }
        return ret;
    }
}
