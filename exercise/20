package thread;

import com.sun.xml.internal.stream.util.ThreadLocalBufferAllocator;
import netscape.security.UserTarget;

import java.util.Scanner;

/**
 * @author 26568
 * @date 2022-12-05 10:42
 */
// 1.继承Thread类
class Mythread extends Thread {
    @Override
    public void run() {
       while (true) {
           try {
               Thread.sleep(1000);
               System.out.println("hello world");
           } catch (InterruptedException e) {
               throw new RuntimeException(e);
           }
       }
    }
}
// 2.实现 Runnable接口
class MyRunnable1 implements Runnable {
    @Override
    public void run() {
        while (true) {
            try {
                Thread.sleep(1000);
                System.out.println("hello world");
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }
}
public class ThreadDemo22 {
    public static void main(String[] args)  {
//        Thread t = new Mythread();
//        t.start();
//        Runnable myRunnable = new MyRunnable1();
//        Thread t = new Thread(myRunnable);
//        t.start();
//        while (true) {
//            try {
//                Thread.sleep(1000);
//                System.out.println("hello main");
//            } catch (InterruptedException e) {
//                throw new RuntimeException(e);
//            }
//        }
        // 3.匿名内部类继承Thread
//        Thread t = new Thread(){
//            @Override
//            public void run() {
//                while (true) {
//                    try {
//                        Thread.sleep(1000);
//                        System.out.println("hello world");
//                    } catch (InterruptedException e) {
//                        throw new RuntimeException(e);
//                    }
//                }
//            }
//        };
//        t.start();
//        while (true) {
//            try {
//                Thread.sleep(1000);
//                System.out.println("hello main");
//            } catch (InterruptedException e) {
//                throw new RuntimeException(e);
//            }
//        }
        // 4.匿名内部类实现Runnable接口
//        Thread t = new Thread(new Runnable(){
//            @Override
//            public void run() {
//                while (true) {
//                    try {
//                        Thread.sleep(1000);
//                        System.out.println("hello Thread");
//                    } catch (InterruptedException e) {
//                        throw new RuntimeException(e);
//                    }
//                }
//            }
//        });
//        t.start();
//        while (true) {
//            try {
//                Thread.sleep(1000);
//                System.out.println("hello main");
//            } catch (InterruptedException e) {
//                throw new RuntimeException(e);
//            }
//        }
        // 5.使用lambda表达式
//        Thread t = new Thread(() -> {
//            while (true) {
//                try {
//                    Thread.sleep(1000);
//                    System.out.println("hello Thread");
//                } catch (InterruptedException e) {
//                    throw new RuntimeException(e);
//                }
//            }
//        });
//        t.start();
//        while (true) {
//            try {
//                Thread.sleep(1000);
//                System.out.println("hello main");
//            } catch (InterruptedException e) {
//                throw new RuntimeException(e);
//            }
//        }
        // a.自定义标志位来控制线程终止
//        Thread t = new Thread(() -> {
//            while (flag) {
//                try {
//                    Thread.sleep(1000);
//                    System.out.println("hello thread");
//                } catch (InterruptedException e) {
//                    throw new RuntimeException(e);
//                }
//            }
//        });
//        t.start();
//        try {
//            Thread.sleep(3000);
//        } catch (InterruptedException e) {
//            throw new RuntimeException(e);
//        }
//        flag = false;
        // 使用Thread自带的标志位进行终止
    }
    public static boolean flag = true;
}
