package thread;

/**
 * 观察线程的状态
 * @author 26568
 * @date 2022-12-04 10:42
 */
public class ThreadDemo21 {
    public static void main(String[] args) {
        Thread t1 = new Thread(() -> {
            // 只进行循环其余什么操作都不做
            for (int i = 0; i < 100; i++) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        // 执行start之前 NEW状态
        System.out.println("start之前"+t1.getState());
        t1.start();
        //for (int i = 0; i < 1000; i++) {
            System.out.println("t1执行中的状态"+t1.getState());
       // }
        try {
            t1.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        System.out.println("线程执行结束后"+t1.getState());
        // 下面是查看WAIT状态的代码
//        Object object1 = new Object();
//        Thread t1 = new Thread(() -> {
//            synchronized (object1) {
//                System.out.println("t1线程执行结束");
//                object1.notify();
//            }
//        });
//        Thread t2 = new Thread(() -> {
//            synchronized (object1) {
//                try {
//                    object1.wait();
//                } catch (InterruptedException e) {
//                    throw new RuntimeException(e);
//                }
//                System.out.println("t2线程执行结束");
//            }
//        });
//        t2.start();
//        try {
//            Thread.sleep(1000);
//        } catch (InterruptedException e) {
//            throw new RuntimeException(e);
//        }
//        System.out.println("t2线程调用wait后:"+t2.getState());
//        t1.start();
    }
}
