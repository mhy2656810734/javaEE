package network;

import javax.xml.crypto.Data;
import java.io.IOException;
import java.net.*;
import java.util.Scanner;

/**
 * UDP 版本的 回显客户端
 * @author 26568
 * @date 2023-01-13 18:10
 */
public class UdpEchoClient {
    private DatagramSocket socket = null;
    // 服务器ip地址
    private  String serverIp = null;
    // 服务器端口号
    private int serverPort = 0;
    // 一次通信 需要有两个ip 两个端口
    // 客户端的 ip 是127.0.0.1
    // 客户端的 端口是系统自动分配的
    // 服务器的ip 和 端口也要告诉客户端,才能顺利把这个消息发给服务器
    public UdpEchoClient(String serverIp,int serverPort) throws SocketException {
        // 让系统自动分配一个端口
        socket = new DatagramSocket();
        this.serverIp = serverIp;
        this.serverPort = serverPort;
    }
    public void start() throws IOException {
        System.out.println("客户端启动");
        Scanner scanner = new Scanner(System.in);
        while (true) {
            // 1.从控制台读取要发送的数据
            System.out.print("> ");
            String request = scanner.next();
            if (request.equals("exit")) {
                System.out.println("goodbye");
                break;
            }
            // 2.构造成UDP请求 并发送
            // 构造这个请求的时候,要把serverIp和serverPort都传过来,但是此处的IP地址需要一个32位的整数形式
            // 上述serverIp是一个字符串,需要使用InetAddress.getByName() 进行转换
            DatagramPacket requestPacket = new DatagramPacket(request.getBytes(),request.getBytes().length,
                    InetAddress.getByName(serverIp),serverPort);
            socket.send(requestPacket);
            // 3.读取服务器的 UDP 响应 并解析
            DatagramPacket responsePacket = new DatagramPacket(new byte[4096],4096);
            socket.receive(responsePacket);
            String response = new String(responsePacket.getData(),0,responsePacket.getLength());
            // 4.把解析好的结果显示出来
            System.out.println(response);
        }
    }
    public static void main(String[] args) throws IOException {
        UdpEchoClient client = new UdpEchoClient("127.0.0.1",9090);
        client.start();
    }
}
