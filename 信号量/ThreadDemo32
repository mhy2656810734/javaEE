package thread;

import java.util.concurrent.Semaphore;

/**
 * 使用信号量实现两个线程增加同一个变量
 * @author 26568
 * @date 2023-01-27 14:03
 */
class Count1 {
    private int count = 0;
    public void add() {
        this.count++;
    };
    public int getCount() {
        return this.count;
    }
}
public class ThreadDemo32 {
    public static void main(String[] args) throws InterruptedException {
        Semaphore semaphore = new Semaphore(1);
        Count1 count1 = new Count1();
        Thread t1 = new Thread(() -> {
            System.out.println("t1申请资源");
            try {
                // 申请一个可用资源
                semaphore.acquire();
                System.out.println("t1申请到资源");
                for (int i = 0; i < 5000; i++) {
                    count1.add();
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            System.out.println("t1释放资源");
            semaphore.release();
        });
        Thread t2 = new Thread(() -> {
            System.out.println("t2申请资源");
            try {
                // 申请一个可用资源
                semaphore.acquire();
                System.out.println("t2申请到资源");
                for (int i = 0; i < 5000; i++) {
                    count1.add();
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            System.out.println("t2释放资源");
            semaphore.release();
        });
        t1.start();
        t2.start();
        t1.join();
        t2.join();
        System.out.println(count1.getCount());
    }
}
